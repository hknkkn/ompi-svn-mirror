#
# Copyright (c) 2006-2007 Cisco Systems, Inc.  All rights reserved.
# Copyright (c) 2006-2007 Sun Microystems, Inc.  All rights reserved.
# Copyright (c) 2008      High Performance Computing Center Stuttgart,
#                         University of Stuttgart.  All rights reserved.
#

# based on samples/ompi-core-template.ini

#======================================================================
# Overall configuration
#======================================================================

[MTT]

# OMPI Core: if you are not running in a scheduled environment and you
# have a fixed hostfile for what nodes you'll be running on, fill in
# the absolute pathname to it here.  If you do not have a hostfile,
# leave it empty.  Example:
#     hostfile = /home/me/mtt-runs/mtt-hostfile
# This file will be parsed and will automatically set a valid value
# for &env_max_np() (it'll count the number of lines in the hostfile,
# adding slots/cpu counts if it finds them).  The "hostfile" value is
# ignored if you are running in a recognized scheduled environment.
# hostfile =

# OMPI Core: if you would rather list the hosts individually on the
# mpirun command line, list hosts here delimited by whitespace (if you
# have a hostfile listed above, this value will be ignored!).  Hosts
# can optionally be suffixed with ":num", where "num" is an integer
# indicating how many processes may be started on that machine (if not
# specified, ":1" is assumed).  The sum of all of these values is used
# for &env_max_np() at run time.  Example (4 uniprocessors):
#    hostlist = node1 node2 node3 node4
# Another example (4 2-way SMPs):
#    hostlist = node1:2 node2:2 node3:2 node4:2
# The "hostlist" value is ignored if you are running in a scheduled
# environment or if you have specified a hostfile.
# hostlist =

# OMPI Core: if you are running in a scheduled environment and want to
# override the scheduler and set the maximum number of processes
# returned by &env_max_procs(), you can fill in an integer here.
# max_np = 

# OMPI Core: Output display preference; the default width at which MTT
# output will wrap.
textwrap = 76

# OMPI Core: After the timeout for a command has passed, wait this
# many additional seconds to drain all output, and then kill it with
# extreme prejiduce.
drain_timeout = 5

# OMPI Core: Whether this invocation of the client is a test of the
# client setup itself.  Specifically, this value should be set to true
# (1) if you are testing your MTT client and/or INI file and do not
# want the results included in normal reporting in the MTT central
# results database.  Results submitted in "trial" mode are not
# viewable (by default) on the central database, and are automatically
# deleted from the database after a short time period (e.g., a week).
# Setting this value to 1 is exactly equivalent to passing "--trial"
# on the MTT client command line.  However, any value specified here
# in this INI file will override the "--trial" setting on the command
# line (i.e., if you set "trial = 0" here in the INI file, that will
# override and cancel the effect of "--trial" on the command line).
trial = 0

# OMPI Core: Set the scratch parameter here (if you do not want it to
# be automatically set to your current working directory). Setting
# this parameter accomplishes the same thing that the --scratch option
# does.
scratch = &getenv("OPENMPI_MTT_SCRATCH")

# OMPI Core: Set local_username here if you would prefer to not have
# your local user ID in the MTT database
local_username = shiqing

# OMPI Core: --force can be set here, instead of at the command line.
# Useful for a developer workspace in which it makes no sense to not
# use --force
# force = 1

# OMPI Core: Specify a list of sentinel files that MTT will regularly
# check for.  If these files exist, MTT will exit more-or-less
# immediately (i.e., after the current test completes) and report all
# of its results.  This is a graceful mechanism to make MTT stop right
# where it is but not lose any results.
# terminate_files = &getenv("HOME")/mtt-stop,&scratch_root()/mtt-stop

# OMPI Core: Specify a default description string that is used in the
# absence of description strings in the MPI install, Test build, and
# Test run sections.  The intent of this field is to record variable
# data that is outside the scope, but has effect on the software under
# test (e.g., firmware version of a NIC).  If no description string is
# specified here and no description strings are specified below, the
# description data field is left empty when reported.  
# description = NIC firmware: &system("get_nic_firmware_rev")

# OMPI Core: Specify a logfile where you want all MTT output to be
# sent in addition to stdout / stderr.
logfile = &getenv("MTT_LOG_FILE")

# OMPI Core: If you have additional .pm files for your own funclets,
# you can have a comma-delimited list of them here.  Note that each
# .pm file *must* be a package within the MTT::Values::Functions
# namespace.  For example, having a Cisco.pm file must include the
# line:
#
#     package MTT::Values::Functions::Cisco;
#
# If this file contains a perl function named foo, you can invoke this
# functlet as &Cisco::foo().  Note that funclet files are loaded
# almost immediately, so you can use them even for other field values
# in the MTT section.
# funclet_files = /path/to/file1.pm, /path/to/file2.pm

# OMPI Core: To ensure that MTT doesn't fill up your disk, you can
# tell MTT to stop when disk space gets too low.  You can specify a
# raw number of bytes or a percentage of overall disk space.  For
# example (default value is "5%"):
#
# min_disk_free = 5% # stop when there's less than 5% disk free
# min_disk_free = 500000 # stop when there's less than 500,000 bytes free

# OMPI Core: When MTT detects a low-disk situation, it can wait a
# little while before reporting whatever results it has accumulated
# and exiting.  The min_disk_free_wait field specifies a number of
# minutes to wait for there to be enough disk space to be free.  If
# there is still not enough disk space at the end of that time, MTT
# will report accumulated results and quit.
#
# min_disk_free_wait = 60

#----------------------------------------------------------------------

[Lock]
# The only module available is the MTTLockServer, and requires running
# the mtt-lock-server executable somewhere.  You can leave this
# section blank and there will be no locking.
#module = MTTLockServer
#mttlockserver_host = hostname where mtt-lock-server is running
#mttlockserver_port = integer port number of the mtt-lock-server



#----------------------------------------------------------------------
#
# Hopefully, this is being read in / set before the MPI install phase...
# Maybe this can be moved to a "generic" section, such as [MPI install]
#

#openib = /opt/system/ofed/1.3
with_openib = <<EOT
&perl("
    if (-d '$openib') {
        return '--with-openib=$openib';
    } else {
        return '';
    }
")
EOT

#tm = /opt/system/torque/2.3.3/
with_tm = <<EOT
&perl("
    if (-d '$tm') {
        return '--with-tm=$tm';
    } else {
        return '';
    }
")
EOT


#======================================================================
# MPI get phase
#======================================================================



[MPI get: ompi-nightly-v1.6]
mpi_details = Open MPI

module = OMPI_Snapshot
ompi_snapshot_url = http://www.open-mpi.org/nightly/v1.6

[SKIP MPI get: ompi-svn-v1.6]
mpi_details = Open MPI

module = SCM
scm_module = SVN
scm_url = http://svn.open-mpi.org/svn/ompi/branches/v1.6

#======================================================================
# Install MPI phase
#======================================================================

#
# This section is used to define some parameters for the configure command line
#
[MPI preinstall]

#openib = /opt/system/ofed/1.3
with_openib = <<EOT
&perl("
    if (-d '@openib@') {
        return '--with-openib=@openib@';
    } else {
        return '';
    }
")
EOT

#tm = /opt/system/torque/2.3.3/
with_tm = <<EOT
&perl("
    if (-d '@tm@') {
        return '--with-tm=@tm@';
    } else {
        return '';
    }
")
EOT

#valgrind = /opt/valgrind-svn
with_valgrind = <<EOT
&perl("
    if (-d '@valgrind@') {
        return '--with-valgrind=@valgrind@';
    } else {
        return '';
    }
")
EOT

ompi_vpath_mode = none
ompi_make_all_arguments = -j 4
ompi_make_check = 1


#----------------------------------------------------------------------

[MPI install: shared build 32 VS10]
mpi_get = ompi-nightly-v1.6
save_stdout_on_success = 1
merge_stdout_stderr = 0
bitness = 32

module = OMPI
ompi_compiler_name = microsoft
# cmake generator
ompi_compiler_version = Visual Studio 10 2010
ompi_configure_arguments = -G 'Visual Studio 10' -D BUILD_SHARED_LIBS:BOOL=TRUE -D OMPI_WANT_CXX_BINDINGS:BOOL=TRUE


#----------------------------------------------------------------------

[MPI install: static build 32 VS10]
mpi_get = ompi-nightly-v1.6
#include_section = MPI preinstall
save_stdout_on_success = 1
merge_stdout_stderr = 0
bitness = 32

module = OMPI
ompi_compiler_name = microsoft
# cmake generator
ompi_compiler_version = Visual Studio 10 2010
ompi_configure_arguments = -G 'Visual Studio 10' -D BUILD_SHARED_LIBS:BOOL=FALSE -D OMPI_WANT_CXX_BINDINGS:BOOL=TRUE


#----------------------------------------------------------------------

[MPI install: shared build 64 VS10]
mpi_get = ompi-nightly-v1.6
#include_section = MPI preinstall
save_stdout_on_success = 1
merge_stdout_stderr = 0
bitness = 64

module = OMPI
ompi_compiler_name = microsoft
# cmake generator
ompi_compiler_version = Visual Studio 10 2010 Win64
ompi_configure_arguments = -G 'Visual Studio 10 Win64' -D BUILD_SHARED_LIBS:BOOL=TRUE -D OMPI_WANT_CXX_BINDINGS:BOOL=TRUE


#----------------------------------------------------------------------

[MPI install: static build 64 VS10]
mpi_get = ompi-nightly-v1.6
#include_section = MPI preinstall
save_stdout_on_success = 1
merge_stdout_stderr = 0
bitness = 64

module = OMPI
ompi_compiler_name = microsoft
# cmake generator
ompi_compiler_version = Visual Studio 10 2010 Win64
ompi_configure_arguments = -G 'Visual Studio 10 Win64' -D BUILD_SHARED_LIBS:BOOL=FALSE -D OMPI_WANT_CXX_BINDINGS:BOOL=TRUE


#======================================================================
# MPI run details
#======================================================================

[MPI Details: Open MPI]

# MPI tests
exec =script -c "export PATH=/usr:$PATH; mpirun @hosts@ -np &test_np() --prefix &test_prefix() @mca@ &test_executable() &test_argv();" -f temp.txt

# ORTE tests
exec:rte = &test_executable() --host &env_hosts() --prefix &test_prefix() &test_argv()

hosts = &if(&have_hostfile(), "--hostfile " . &hostfile(), \
            &if(&have_hostlist(), "--host " . &hostlist(), ""))

# Boolean indicating IB connectivity
is_up = &check_ipoib_connectivity()

# Figure out which mca's to use
mca = <<EOT
&perl('

     # Return cached mca, if we have it
     if (defined(@mca)) {
         return \@mca;
     }

     my @hosts = split /\s+|,/, hostlist_hosts();

     if (scalar(@hosts) < 2) {
         push(@mca, "--mca btl self,sm");
     } else {
         if ($ib_up) {
             push(@mca, "--mca btl self,sm,openib");
         } else {
             push(@mca, "--mca btl self,sm,tcp");
         }
     }
     return \@mca;
')
EOT

#----------------------------------------------------------------------
# WARNING: THIS DEFAULT after_each_exec STEP IS PRONE TO FAILURE!
# Given that part of what we are testing is ORTE itself, using orterun
# to launch something to cleanup can be problematic.  We *HIGHLY*
# recommend that you replace the after_each_exec section default value
# below with something that your run-time system can perform
# natively.  For example, putting "srun -N $SLURM_NNODES killall -9
# mpirun orted &test_executable()" works nicely on SLURM / Linux
# systems -- assuming that your MTT run has all nodes exclusively to
# itself (i.e., that the "killall" won't kill some legitimate jobs).
#----------------------------------------------------------------------

# A helper script is installed by the "OMPI" MPI Install module named
# "mtt_ompi_cleanup.pl".  This script is orterun-able and will kill
# all rogue orteds on a node and whack any session directories.
# Invoke via orterun just to emphasize that it is not an MPI
# application.  The helper script is installed in OMPI's bin dir, so
# it'll automatically be found in the path (because OMPI's bin dir is
# in the path).

after_each_exec = <<EOT
# We can exit if the test passed or was skipped (i.e., there's no need
# to cleanup).
if test "$MTT_TEST_RUN_RESULT" = "passed" -o "$MTT_TEST_RUN_RESULT" = "skipped"; then
    exit 0
fi

if test "$MTT_TEST_HOSTFILE" != ""; then
    args="--hostfile $MTT_TEST_HOSTFILE"
elif test "$MTT_TEST_HOSTLIST" != ""; then
    args="--host $MTT_TEST_HOSTLIST"
fi
orterun $args -np $MTT_TEST_NP --prefix $MTT_TEST_PREFIX mtt_ompi_cleanup.pl
EOT

#======================================================================
# Test get phase
#======================================================================

[SKIP Test get: ibm]
module = SCM
scm_module = SVN
scm_url = http://svn.open-mpi.org/svn/ompi-tests/trunk/ibm
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[SKIP Test get: onesided]
module = SCM
scm_module = SVN
scm_url = http://svn.open-mpi.org/svn/ompi-tests/trunk/onesided
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[SKIP Test get: mpicxx]
module = SCM
scm_module = SVN
scm_url = http://svn.open-mpi.org/svn/ompi-tests/trunk/cxx-test-suite
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[SKIP Test get: imb]
module = Copytree
copytree_directory = /cygdrive/d/work/OpenMPI/mtt-files/ompi-tests/imb_3.2

#----------------------------------------------------------------------

[SKIP Test get: netpipe]
module = Copytree
copytree_directory = /cygdrive/d/work/OpenMPI/mtt-files/ompi-tests/NetPIPE_3.6.2

#----------------------------------------------------------------------

[SKIP Test get: nbcbench]
module = SCM
scm_module = SVN
scm_url = http://svn.open-mpi.org/svn/ompi-tests/trunk/nbcbench

#----------------------------------------------------------------------

[SKIP Test get: mpi_test_suite]
module = SCM
scm_module = SVN
scm_url = http://svn.open-mpi.org/svn/ompi-tests/trunk/mpi_test_suite
scm_post_copy = <<EOT
./autogen.sh
EOT


#======================================================================
# Test build phase
#======================================================================

[SKIP Test build: ibm]
test_get = ibm
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
./configure CC=mpicc CXX=mpic++ F77=mpif77
make
EOT

#----------------------------------------------------------------------

[SKIP Test build: onesided]
test_get = onesided
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
./configure
make
EOT

#----------------------------------------------------------------------

[SKIP Test build: mpicxx]
test_get = mpicxx
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Shell
shell_build_command = <<EOT
./configure CC=mpicc CXX=mpic++
make
EOT

#----------------------------------------------------------------------

[SKIP Test build: imb]
test_get = imb
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
#
# We have to set the MPI_HOME var -- do so by twice a dirname...
#
shell_build_command = <<EOT
cd src
make -f make_win32
EOT

#----------------------------------------------------------------------

[SKIP Test build: netpipe]
test_get = netpipe
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
make mpi-win
EOT

#----------------------------------------------------------------------

[SKIP Test build: nbcbench]
test_get = nbcbench
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
cd NBCBench-0.9.2/
./configure CC=mpicc CXX=mpic++
make
EOT

#----------------------------------------------------------------------

[SKIP Test build: mpi_test_suite]
test_get = mpi_test_suite
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
TMP1=`which mpicc`
TMP2=`dirname $TMP1`
MPI_DIR=`dirname $TMP2`

if [ -d $MPI_DIR/lib64 ] ; then
  MPI_LIBDIR=$MPI_DIR/lib64
elif [ -d $MPI_DIR/lib ] ; then
  MPI_LIBDIR=$MPI_DIR/lib
fi

./configure CC=mpicc CXX=mpic++ --with-mpi-dir=$MPI_DIR --with-mpi-lib-dir=$MPI_LIBDIR
make
EOT


#======================================================================
# Test Run phase
#======================================================================

# Some default Test run parameters to include in (most) Test run sections
[Test run]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = 100
np = &env_max_procs()
specify_module = Simple

[SKIP Test run: ibm]
include_section = Test run
test_build = ibm

skipped = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 77))

# Similar rationale to the intel test run section
simple_first:tests = &find_executables("collective", "communicator", \
                                       "datatype", "dynamic", "environment", \
                                       "group", "info", "io", "onesided", \
                                       "pt2pt", "topology")

# Similar rationale to the intel test run section
simple_fail:tests = environment/abort environment/final
simple_fail:pass = &and(&cmd_wifexited(), &ne(&cmd_wexitstatus(), 0))
simple_fail:exclusive = 1
simple_fail:np = &env_max_procs()

#----------------------------------------------------------------------

[SKIP Test run: onesided]
include_section = Test run
test_build = onesided

np = &if(&gt(&env_max_procs(), 0), &step(2, &max(2, &env_max_procs()), 2), 2)

simple_pass:tests = &cat("run_list")

#----------------------------------------------------------------------

[SKIP Test run: mpicxx]
include_section = Test run
test_build = mpicxx

argv = &if(&eq(&mpi_get_name(), "ompi-nightly-v1.1"), "-nothrow", "")

simple_pass:tests = src/mpi2c++_test src/mpi2c++_dynamics_test

#----------------------------------------------------------------------
     
[SKIP Test run: imb correctness]
include_section = Test run
test_build = imb

timeout = &max(1800, &multiply(50, &test_np()))
merge_stdout_stderr = 1
stdout_save_lines = 100

simple_only:tests = src/IMB-MPI1.exe

#----------------------------------------------------------------------

[SKIP Test run: imb performance]
include_section = Test run
test_build = imb

pass = &eq(&cmd_wexitstatus(), 0)
timeout = -1
# Ensure to leave this value as "-1", or performance results could be lost!
stdout_save_lines = -1
merge_stdout_stderr = 1

argv = -npmin &test_np() &enumerate("PingPong", "PingPing", "Sendrecv", "Exchange", "Allreduce", "Reduce", "Reduce_scatter", "Allgather", "Allgatherv", "Alltoall", "Bcast", "Barrier") 

analyze_module = IMB
simple_pass:tests = src/IMB-MPI1.exe

#----------------------------------------------------------------------

[SKIP Test run: netpipe]
test_build = netpipe

pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
# Timeout hueristic: 10 minutes
timeout = 10:00
save_stdout_on_pass = 1
# Ensure to leave this value as "-1", or performance results could be lost!
stdout_save_lines = -1
merge_stdout_stderr = 1
np = 2

specify_module = Simple
analyze_module = NetPipe

simple_pass:tests = NPmpi.exe

#----------------------------------------------------------------------

[SKIP Test run: nbcbench]
include_section = Test run
test_build = nbcbench

pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
timeout = -1
# Ensure to leave this value as "-1", or performance results could be lost!
stdout_save_lines = -1
merge_stdout_stderr = 1

analyze_module = NBCBench
simple_pass:tests = nbcbench

argv = -p &test_np()-&test_np() -s 1-1048576 -v -t \
    &enumerate("MPI_Allgatherv", "MPI_Allgather", "MPI_Allreduce", \
    "MPI_Alltoall", "MPI_Alltoallv", "MPI_Barrier", "MPI_Bcast", \
    "MPI_Gather", "MPI_Gatherv", "MPI_Reduce", "MPI_Reduce_scatter", \
    "MPI_Scan", "MPI_Scatter", "MPI_Scatterv")

#----------------------------------------------------------------------

[SKIP Test run: mpi_test_suite]
include_section = Test run
test_build = mpi_test_suite

pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
timeout = -1
# Ensure to leave this value as "-1", or performance results could be lost!
stdout_save_lines = -1
merge_stdout_stderr = 1

simple_pass:tests = mpi_test_suite

# Reset the run parameters, so that a bit less output is generated
# Do not run with MPI_TYPE_MIX and MPI_SHORT_INT -- as they produce errors
### Full detail is obtained with: argv = '-r Full'
argv = -r Summary -t P2P,Collective -d All,!MPI_SHORT_INT,!MPI_TYPE_MIX


#======================================================================
# Reporter phase
#======================================================================

[Reporter: IU database]
module = MTTDatabase

mttdatabase_realm = OMPI
mttdatabase_url = http://www.open-mpi.org/mtt/submit/
mttdatabase_username = hlrs
mttdatabase_password = hlrsompi
mttdatabase_platform = Windows Server 2008

#----------------------------------------------------------------------

# This is a backup for while debugging MTT; it also writes results to
# a local text file

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt

textfile_summary_header = <<EOT
hostname: &shell("hostname")
uname: &shell("uname -a")
processor: &shell("cat /proc/cpuinfo")
who am i: &shell("who am i")
EOT

textfile_summary_footer =
textfile_detail_header =
textfile_detail_footer =

textfile_textwrap = 78

[Reporter: send email]
module = Email
email_to = fan@hlrs.de
email_subject = MPI test results: &current_section()

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            